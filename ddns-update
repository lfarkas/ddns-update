#!/bin/sh

set -e

PATH=/usr/sbin:/sbin:$PATH

CONF=/etc/ddns-update/ddns-update.conf
DAEMON=false

while [ $# -gt 0 ]; do
	case $1 in
		-c)
			CONF=$2
			shift
			;;
		-d|--daemon)
			DAEMON=true
			if [ $# -ge 2 ]; then
				INTERVAL=$2
				shift
			fi
			;;
		*)
			echo "Unknown parameter $1" 1>&2
			exit 1
	esac
	shift
done

[ ! -f $CONF ] || source $CONF

[ -n "$INTERVAL" ] || INTERVAL=300
[ -n "$EXTERNAL" ] || EXTERNAL=true
[ -n "IF" ] && OUT_IF=$IF || IF=eth0
# other implementation can be
# HOST=$(expr `cat /proc/sys/kernel/hostname` : '\([^.][^.]*\)\..*')
# HOST=$(sed  's/\..*//' < /proc/sys/kernel/hostname)
# ZONE=$(expr `cat /proc/sys/kernel/hostname` : '[^.][^.]*\.\(.*\)')
# ZONE=$(sed -n 's/[^.]*\.//p' < /proc/sys/kernel/hostname)
[ -n "$HOST" ]   || HOST=`cut -d. -f1 < /proc/sys/kernel/hostname`
[ -n "$ZONE" ]   || ZONE=`cut -d. -f2- < /proc/sys/kernel/hostname`
[ -n "$SERVER" ] || SERVER=`dig +short soa $ZONE|cut -d" " -f1`
[ -n "$TTL" ]    || TTL=600
[ -n "$KEY" ]    || KEY="/etc/ddns-update/K$ZONE.*.private"
[ -n "$CMD" ]    || CMD=curl
[ $FORCE_TCP ]   && TCP="-v" || TCP=""
if [ $USE_IPV6 ]; then
#	RRTYPE="AAAA"
	TYPE="inet6"
else
	RRTYPE="A"
	TYPE="inet"
fi
[ -n "$ALLOW_PRIVATE" ] || ALLOW_PRIVATE=false
[ -n "$USE_LOGGER" ]	|| USE_LOGGER=true

FQDN="$HOST.$ZONE"


log() {
	if $USE_LOGGER ; then
		[ -z $LOGFILE ] || LOGGER_OPT="-f $LOGFILE"
		logger -t ddns-update $LOGGER_OPT "$@"
	elif [ -f $LOGFILE ]; then
		echo "$@" >> $LOGFILE
	else
		echo "$@"
	fi
}

get_interface_ip() {
	#command -v ip >/dev/null 2>&1 && IP=ip || IP=/sbin/ip
	ip -family $TYPE addr show $IF | grep $TYPE | sed "s/.*$TYPE \([0-9.]*\).*/\1/"
}

get_external_ip() {
	case $CMD in
		curl)
			[ -z "$OUT_IF" ] || OUT_PARAM="--interface $IF"
			curl --noproxy '*' $OUT_PARAM -s "$IP_LOOKUP_URL"
			;;
		wget)
			[ -z "$OUT_IF" ] || OUT_PARAM="--bind-address `get_interface_ip`"
			wget --no-proxy $OUT_PARAM -q -O - "$IP_LOOKUP_URL"
			;;
		links)
			no_proxy='*' links -source "$IP_LOOKUP_URL"
			;;
		fetch)
			fetch -q -o - "$IP_LOOKUP_URL"
			;;
		*)
			$CMD "$IP_LOOKUP_URL"
			;;
	esac
}

discover_ip() {
	DNS_IP="`dig @$SERVER $FQDN +short`"
	$EXTERNAL && NEW_IP="`get_external_ip`" || NEW_IP="`get_interface_ip`"
}

send_update()
{
	if [ -f $KEY ]; then
		command -v chcon >/dev/null 2>&1 && chcon -t dnssec_t $KEY >/dev/null 2>&1 ||:
		log "Send update to $SERVER host: $FQDN from: $DNS_IP to: $NEW_IP ttl: $TTL"
		nsupdate $TCP -k $KEY <<EOF
server $SERVER
zone $ZONE
update del $FQDN $RRTYPE
update add $FQDN $TTL $RRTYPE $NEW_IP
send
EOF
	else
		log "Error: Key file ($KEY) missing for dns update!"
		exit 1
	fi
}

ddns_update() {
	if [ "$DNS_IP" != "$NEW_IP" ]; then
		if ! $ALLOW_PRIVATE ; then
			case "$NEW_IP" in
				10.* | 172.1[6-9].* | 172.2[0-9].* | 172.3[0-1].* | 192.168.*)
					log "Error: Private IP address update not allowed ($NEW_IP)."
					exit 1
					;;
				*)
        				;;
			esac
		fi

		send_update
		RC=$?
		if [ $RC != 0 ]; then
			log "Error: Updating $FQDN failed (RC=$RC)."
		else
			log "DNS Update was succesful."
		fi
	fi
	return $RC
}

if $DAEMON ; then
	echo $$ > /var/run/ddns-update/ddns-update.pid
	while : ; do
		discover_ip
		ddns_update
		sleep $INTERVAL
	done
else
	discover_ip
	ddns_update
fi
